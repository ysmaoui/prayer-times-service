Description:
  A Jenkins Cluster - Servers

Parameters:

  EnvironmentName:
    Description: environment name
    Type: String

  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  JenkinsMasterConfigEFS:
    ConstraintDescription: must be an existing EFS ID
    Description: File system ID where the JENKINS_HOME should be stored
    Type: String

  WebServerInstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.medium
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: Webserber EC2 instance type
    Type: String

  JenkinsMasterInstanceType:
    Description: Instance type for the Jenkins Master
    Type: String
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro

  MountPoint:
    Description: Linux mount point for the EFS volume
    Type: String
    Default: "/var/lib/jenkins"

Mappings:
  AWSInstanceType2Arch:
    # 1 vCPU 1GB
    t2.micro:
      Arch: HVM64
    # 2 vCPU 4GB
    t2.medium:
      Arch: HVM64
    # 2 vCPU 4GB
    t3.medium:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-west-2:
      # ubuntu 18 64-bit x86
      HVM64: ami-06f2f779464715dc5


Resources:
  # JenkinsMasterConfigEFS:
  #   Type: AWS::EFS::FileSystem
  #   DeletionPolicy: Retain
  #   Properties:
  #     FileSystemTags:
  #       - Key: Name
  #         Value: JenkinsMasterConfig
  #     PerformanceMode: generalPurpose

  JenkinsMasterConfigEFSMountTargetAZ1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsMasterConfigEFS
      SecurityGroups:
        - !Ref EFSSecGroup
      SubnetId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-PRI1-SN"

  JenkinsMasterConfigEFSMountTargetAZ2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsMasterConfigEFS
      SecurityGroups:
        - !Ref EFSSecGroup
      SubnetId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-PRI2-SN"


  JenkinsMasterSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowing access to port 22 for ssh
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EFSSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowing access to port 2049 for EFS
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPC-CIDR"

  JenkinsMasterLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          MountConfig:
            - setup
            - mount
        setup:
          files:
            /tmp/setup_nfs:
              content: !Sub |
                #!/bin/bash -xe
                apt-get update
                apt-get install -y nfs-common
              mode: "000500"
              owner: "root"
              group: "root"
          commands:
            01_install_nfs_utilities:
              command:
                "/tmp/setup_nfs > /var/log/setup_nfs_utils.log 2>&1"
            02_create_mount_dir:
              command:
                !Sub "mkdir -p ${MountPoint}"
        mount:
          commands:
            01_mount:
              command:
                !Sub "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${JenkinsMasterConfigEFS}.efs.${AWS::Region}.amazonaws.com:/ /${MountPoint}"
            02_permissions:
              command:
                !Sub "chown ubuntu:ubuntu ${MountPoint}"


    Properties:
      ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region' , !FindInMap [ AWSInstanceType2Arch, !Ref JenkinsMasterInstanceType, Arch ] ]
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref JenkinsMasterSecGroup
      InstanceType: !Ref JenkinsMasterInstanceType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update
          apt-get -y install python-pip
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --resource JenkinsMasterLaunchConfig \
            --configsets MountConfig \
            --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? \
            --stack ${AWS::StackName} \
            --resource JenkinsMasterGroup \
            --region ${AWS::Region}

  JenkinsMasterGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NETS"
      LaunchConfigurationName:
        !Ref JenkinsMasterLaunchConfig
      MinSize: 1
      MaxSize: 1

#   LoadBalencerSecGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Allow http to our load balancer
#       VpcId:
#         Fn::ImportValue:
#           !Sub "${EnvironmentName}-VPCID"
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 80
#           ToPort: 80
#           CidrIp: 0.0.0.0/0
#       SecurityGroupEgress:
#         - IpProtocol: tcp
#           FromPort: 80
#           ToPort: 80
#           CidrIp: 0.0.0.0/0


#   WebServerSecGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Allowing access to port 80
#       VpcId:
#         Fn::ImportValue:
#           !Sub "${EnvironmentName}-VPCID"
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 80
#           ToPort: 80
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 22
#           ToPort: 22
#           CidrIp:
#             # Allows access only for servers within the VPC
#             Fn::ImportValue: !Sub "${EnvironmentName}-VPC-CIDR"
#       SecurityGroupEgress:
#         - IpProtocol: tcp
#           FromPort: 0
#           ToPort: 65535
#           CidrIp: 0.0.0.0/0

#   BastionHostSecGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Allowing access to port 22 for ssh
#       VpcId:
#         Fn::ImportValue:
#           !Sub "${EnvironmentName}-VPCID"
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 22
#           ToPort: 22
#           # should reduce to only my personal ip
#           # but for demo purposes I am leaving this open from everywhere
#           CidrIp: 0.0.0.0/0
#       SecurityGroupEgress:
#         - IpProtocol: tcp
#           FromPort: 22
#           ToPort: 22
#           CidrIp:
#             # Allows access only for servers within the VPC
#             Fn::ImportValue: !Sub "${EnvironmentName}-VPC-CIDR"
#   InstanceProfile:
#     Type: AWS::IAM::InstanceProfile
#     Properties:
#       Path: "/"
#       Roles:
#         - UdacityS3ReadOnlyEC2

#   BastionHostLaunchConfig:
#     Type: AWS::AutoScaling::LaunchConfiguration
#     Properties:
#       ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region' , !FindInMap [ AWSInstanceType2Arch, !Ref BastionInstanceType, Arch ] ]
#       KeyName: !Ref KeyName
#       SecurityGroups:
#         - !Ref BastionHostSecGroup
#       InstanceType: !Ref BastionInstanceType

#   WebAppLaunchConfig:
#     Type: AWS::AutoScaling::LaunchConfiguration
#     Metadata:
#       AWS::CloudFormation::Authentication:
#         S3AccessCreds:
#           type: S3
#           roleName: UdacityS3ReadOnlyEC2
#       AWS::CloudFormation::Init:
#         configSets:
#           Deploy: "Deploy"
#         Deploy:
#           files:
#             /tmp/playbook_configure_server.yml:
#               source: "https://udacity-cloudformation-project-yacine.s3.amazonaws.com/playbook_configure_server.yml"
#               mode: "000644"
#               owner: "root"
#               group: "root"
#               authentication: S3AccessCreds
#             /tmp/udacity.zip:
#                 source: "https://udacity-cloudformation-project-yacine.s3.amazonaws.com/udacity.zip"
#                 mode: "000644"
#                 owner: "root"
#                 group: "root"
#                 authentication: S3AccessCreds
#             /tmp/setup_ansible:
#               content: !Sub |
#                 #!/bin/bash -xe
#                 apt-get update
#                 apt-get install -y software-properties-common
#                 apt-add-repository --yes --update ppa:ansible/ansible
#                 apt-get install -y ansible
#                 echo "localhost ansible_connection=local" > /etc/ansible/hosts
#               mode: "000500"
#               owner: "root"
#               group: "root"
#             /tmp/setup_webapp:
#               content: !Sub |
#                 #!/bin/bash -xe
#                 mkdir -p /var/www/html
#                 unzip /tmp/udacity.zip -d /var/www/html
#               mode: "000500"
#               owner: "root"
#               group: "root"
#           commands:
#             00_configureAnsible:
#               command:
#                 "/tmp/setup_ansible > /var/log/setup_ansible.log 2>&1"
#             01_installDocker:
#               command:
#                 "ansible-playbook /tmp/playbook_configure_server.yml > /var/log/setup_ansiblePlaybook.log 2>&1"
#             02_setupWebApp:
#               command:
#                 "/tmp/setup_webapp > /var/log/setup_webapp.log 2>&1"
#             03_runDocker:
#               command:
#                 "docker run -d -p 80:80 -v /var/www/html:/var/www/html php:apache"
#     Properties:
#       UserData:
#         Fn::Base64: !Sub |
#           #!/bin/bash -xe
#           apt-get update
#           apt-get -y install python-pip
#           pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
#           /usr/local/bin/cfn-init -v \
#             --stack ${AWS::StackName} \
#             --resource WebAppLaunchConfig \
#             --configsets Deploy \
#             --region ${AWS::Region}
#           /usr/local/bin/cfn-signal -e $? \
#             --stack ${AWS::StackName} \
#             --resource WebAppGroup \
#             --region ${AWS::Region}
#       ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region' , !FindInMap [ AWSInstanceType2Arch, !Ref WebServerInstanceType, Arch ] ]
#       # keyName is Needed for the Bastion host which will be connecting via ssh-agent forwarding
#       KeyName: !Ref KeyName
#       SecurityGroups:
#         - !Ref WebServerSecGroup
#       IamInstanceProfile: !Ref InstanceProfile
#       InstanceType: !Ref WebServerInstanceType
#       BlockDeviceMappings:
#         - DeviceName: "/dev/sdk"
#           Ebs:
#             VolumeSize: '10'

#   WebAppGroup:
#     Type: AWS::AutoScaling::AutoScalingGroup
#     Properties:
#       VPCZoneIdentifier:
#         - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
#       LaunchConfigurationName:
#         !Ref WebAppLaunchConfig
#       MinSize: 1
#       MaxSize: 4
#       DesiredCapacity: 1
#       TargetGroupARNs:
#         - !Ref WebAppTargetGroup
#     CreationPolicy:
#       ResourceSignal:
#         Timeout: PT5M
#     UpdatePolicy:
#       AutoScalingRollingUpdate:
#         MinInstancesInService: "1"
#         MaxBatchSize: "1"
#         PauseTime: "PT5M"
#         WaitOnResourceSignals: "true"
#         SuspendProcesses:
#           - HealthCheck
#           - ReplaceUnhealthy
#           - AZRebalance
#           - AlarmNotification
#           - ScheduledActions

#   BastionHostGroup:
#     Type: AWS::AutoScaling::AutoScalingGroup
#     Properties:
#       VPCZoneIdentifier:
#         - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NETS"
#       LaunchConfigurationName:
#         !Ref BastionHostLaunchConfig
#       MinSize: 1
#       MaxSize: 1

#   WebAppLB:
#     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#     Properties:
#       Subnets:
#         - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
#         - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
#       SecurityGroups:
#         - !Ref LoadBalencerSecGroup

#   Listener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref WebAppTargetGroup
#       LoadBalancerArn:
#         !Ref WebAppLB
#       Port: '80'
#       Protocol: HTTP
#   ALBListenerRule:
#     Type: AWS::ElasticLoadBalancingV2::ListenerRule
#     Properties:
#       Actions:
#       - Type: forward
#         TargetGroupArn: !Ref WebAppTargetGroup
#       Conditions:
#         - Field: path-pattern
#           Values: [/]
#       ListenerArn: !Ref Listener
#       Priority: 1

#   WebAppTargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       HealthCheckIntervalSeconds: 10
#       HealthCheckPath: /
#       HealthCheckProtocol: HTTP
#       HealthCheckTimeoutSeconds: 8
#       HealthyThresholdCount: 2
#       Port: 80
#       Protocol: HTTP
#       UnhealthyThresholdCount: 5
#       VpcId:
#         Fn::ImportValue:
#           !Sub "${EnvironmentName}-VPCID"

# Outputs:
#   LoadBalancerUrl:
#     Description: The Url of the load balancer
#     Value: !Sub "http://${WebAppLB.DNSName}"
